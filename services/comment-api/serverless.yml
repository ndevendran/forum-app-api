# NOTE: update this with your service name
service: comment-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}
    publicKeyURL: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_LBYlIME5a/.well-known/jwks.json
    # tableNameUserPosts: userposts
    # tableNameComments: usercomments
    # tableNameCommentLikes: commentLikes
    # tableNamePostLikes: userlikes
    # bucketName: niro-forum-user-uploads
    # avatarFileName: _user_avatar

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-ExtCommentsTableArn
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:PutObject
      Resource:
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-ExtAttachmentsBucketArn
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}

functions:
  create:
    handler: post_comment.main
    events:
      - http:
          path: comment/{postId}
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get_comment.main
    events:
      - http:
          path: comment/{postId}/{commentId}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list_comments.main
    events:
      - http:
          path: comment/{postId}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update_comment.main
    events:
      - http:
          path: comment/{postId}/{commentId}
          method: put
          cors: true
          authorizer: aws_iam


resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
